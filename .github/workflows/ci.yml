name: CI (Build on Windows, Linux, macOS)

on:
  push:
    branches: [ main, develop, '*' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    name: Build (${{ matrix.label }})
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: self-hosted-windows
            runs_on: '["self-hosted","windows"]'
          - label: ubuntu-latest
            runs_on: '"ubuntu-latest"'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        env:
          DOTNET_INSTALL_DIR: ${{ runner.os == 'Windows' && format('{0}\dotnet', runner.temp) || format('{0}/dotnet', runner.temp) }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ matrix.label }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ matrix.label }}-nuget-

      - name: Restore (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: dotnet restore HRHelper.sln
      - name: Restore (non-Windows)
        if: runner.os != 'Windows'
        run: dotnet restore HRHelper.sln

      - name: Build Release (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: dotnet build HRHelper.sln -c Release --no-restore
      - name: Build Release (non-Windows)
        if: runner.os != 'Windows'
        run: dotnet build HRHelper.sln -c Release --no-restore

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.label }}
          path: |
            src/HRHelper/bin/Release

  test:
    name: Test (${{ matrix.label }})
    needs: build
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - label: ubuntu-latest
            runs_on: '"ubuntu-latest"'
          - label: self-hosted-windows
            runs_on: '["self-hosted","windows"]'
          - label: self-hosted-linux
            runs_on: '["self-hosted","linux"]'
          - label: self-hosted-macos
            runs_on: '["self-hosted","macos"]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
        env:
          DOTNET_INSTALL_DIR: ${{ runner.os == 'Windows' && format('{0}\dotnet', runner.temp) || format('{0}/dotnet', runner.temp) }}

      - name: Restore (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: dotnet restore HRHelper.sln
      - name: Restore (non-Windows)
        if: runner.os != 'Windows'
        run: dotnet restore HRHelper.sln

      - name: Build Release (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: dotnet build HRHelper.sln -c Release --no-restore
      - name: Build Release (non-Windows)
        if: runner.os != 'Windows'
        run: dotnet build HRHelper.sln -c Release --no-restore

      - name: Test with coverage (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: dotnet test HRHelper.sln -c Release --no-build --collect:"XPlat Code Coverage" --results-directory TestResults
      - name: Test with coverage (non-Windows)
        if: runner.os != 'Windows'
        run: dotnet test HRHelper.sln -c Release --no-build --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Report coverage summary
        if: runner.os != 'Windows'
        run: |
          COVERAGE=$(find TestResults -name 'coverage.cobertura.xml' | head -n 1)
          if [ -f "$COVERAGE" ]; then
            echo "Cobertura: $COVERAGE"
          fi

      - name: Upload coverage to GitHub summary (Linux only)
        if: runner.os == 'Linux'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: TestResults/**/coverage.cobertura.xml
          badge: true
          format: markdown
          output: both

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.label }}
          path: TestResults


