name: CI (Build on Windows, Linux, macOS)

on:
  push:
    branches: [ main, develop, '*' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore HRHelper.sln

      - name: Build Release
        run: dotnet build HRHelper.sln -c Release --no-restore

      - name: Upload build artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: |
            src/HRHelper/bin/Release

  test:
    name: Test (${{ matrix.os }})
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore HRHelper.sln

      - name: Build Release
        run: dotnet build HRHelper.sln -c Release --no-restore

      - name: Test with coverage
        run: dotnet test HRHelper.sln -c Release --no-build --collect:"XPlat Code Coverage" --results-directory TestResults

      - name: Report coverage summary
        if: runner.os != 'Windows'
        run: |
          COVERAGE=$(find TestResults -name 'coverage.cobertura.xml' | head -n 1)
          if [ -f "$COVERAGE" ]; then
            echo "Cobertura: $COVERAGE"
          fi

      - name: Upload coverage to GitHub summary (Linux only)
        if: runner.os == 'Linux'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: TestResults/**/coverage.cobertura.xml
          badge: true
          format: markdown
          output: both

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: TestResults


